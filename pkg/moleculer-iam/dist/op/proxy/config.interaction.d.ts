import compose from "koa-compose";
import Router from "koa-router";
import Provider, { ClientMetadata } from "oidc-provider";
import { InteractionRequestContext } from "./config.interaction.types";
import { OIDCAccountClaims } from "./identity.types";
import { Client } from "./proxy.types";
import { Identity, IdentityProvider } from "../../idp";
import { Logger } from "../../logger";
export declare type ProviderInteractionBuilderProps = {
    logger: Logger;
    getProvider: () => Provider;
    idp: IdentityProvider;
    issuer: string;
    dev: boolean;
};
export declare class ProviderInteractionBuilder {
    private readonly props;
    readonly router: Router<any, InteractionRequestContext>;
    private readonly logger;
    constructor(props: ProviderInteractionBuilderProps);
    private readonly setRouterPrefix;
    private _prefix;
    readonly prefix: string;
    _dangerouslySetPrefix(prefix: string): void;
    readonly url: (path: string) => string;
    private readonly parseContext;
    private readonly errorHandler;
    private readonly commonMiddleware;
    readonly op: Provider;
    readonly metadata: any;
    readonly idp: IdentityProvider;
    private readonly composed;
    use(...middleware: compose.Middleware<InteractionRequestContext>[]): this;
    build(): void;
    setRenderFunction(render: ProviderInteractionBuilder["render"]): void;
    private render;
    private renderError;
    private readonly renderErrorProxy;
    private renderLogout;
    private readonly logoutSourceProxy;
    private renderLogoutEnd;
    private readonly postLogoutSuccessSourceProxy;
    private renderDeviceFlow;
    private readonly deviceFlowUserCodeInputSourceProxy;
    private renderDeviceFlowConfirm;
    private readonly deviceFlowUserCodeConfirmSourceProxy;
    private renderDeviceFlowEnd;
    private readonly deviceFlowSuccessSourceProxy;
    readonly namedRoutesProxy: {
        renderErrorProxy: any;
        logoutSourceProxy: any;
        postLogoutSuccessSourceProxy: any;
        deviceFlowUserCodeInputSourceProxy: any;
        deviceFlowUserCodeConfirmSourceProxy: any;
        deviceFlowSuccessSourceProxy: any;
    };
    getPublicClientProps(client?: Client): Promise<Partial<ClientMetadata> | undefined>;
    getPublicUserProps(id?: Identity): Promise<Partial<OIDCAccountClaims> | undefined>;
}
