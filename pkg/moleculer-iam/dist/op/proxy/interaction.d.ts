import compose from "koa-compose";
import Router from "koa-router";
import { interactionPolicy } from "oidc-provider";
import { IdentityFederationBuilder } from "./federation";
import { InteractionRequestContext } from "./interaction.types";
import { InteractionStateRenderer, InteractionStateRendererFactory } from "./renderer";
import { DynamicConfiguration, ProviderConfigBuilder } from "./config";
export declare class ProviderInteractionBuilder {
    private readonly builder;
    readonly router: Router<any, InteractionRequestContext>;
    private readonly logger;
    readonly federation: IdentityFederationBuilder;
    constructor(builder: ProviderConfigBuilder);
    private _prefix;
    get prefix(): string;
    _dangerouslySetPrefix(prefix: string): void;
    get idp(): import("../..").IdentityProvider;
    get op(): import("oidc-provider").Provider;
    readonly getURL: (path: string) => string;
    private readonly extendContext;
    private readonly errorHandler;
    private readonly commonMiddleware;
    private readonly middleware;
    use(...middleware: compose.Middleware<InteractionRequestContext>[]): this;
    setPageRenderer<F extends InteractionStateRendererFactory>(factory: F, options?: F extends InteractionStateRendererFactory<infer O> ? O : never): this;
    private _stateRenderer?;
    get stateRenderer(): InteractionStateRenderer;
    private renderError;
    private readonly renderErrorProxy;
    private renderLogout;
    private readonly logoutSourceProxy;
    private renderLogoutEnd;
    private readonly postLogoutSuccessSourceProxy;
    private renderDeviceFlow;
    private readonly deviceFlowUserCodeInputSourceProxy;
    private renderDeviceFlowConfirm;
    private readonly deviceFlowUserCodeConfirmSourceProxy;
    private renderDeviceFlowEnd;
    private readonly deviceFlowSuccessSourceProxy;
    private readonly _config;
    setPrompts(prompts: interactionPolicy.Prompt[]): this;
    _dangerouslyGetDynamicConfiguration(): Partial<DynamicConfiguration>;
    _dangerouslyBuild(): void;
}
