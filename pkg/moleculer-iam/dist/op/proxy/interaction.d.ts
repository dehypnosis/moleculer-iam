import compose from "koa-compose";
import Router from "koa-router";
import { ClientMetadata, interactionPolicy } from "oidc-provider";
import { IdentityFederationBuilder } from "./federation";
import { InteractionRequestContext } from "./interaction.types";
import { OIDCAccountClaims } from "./identity.types";
import { Client } from "./proxy.types";
import { Identity } from "../../idp";
import { InteractionPageRenderer, InteractionPageRendererFactory } from "./renderer";
import { DynamicConfiguration, ProviderConfigBuilder } from "./config";
export declare class ProviderInteractionBuilder {
    private readonly builder;
    readonly router: Router<any, InteractionRequestContext>;
    private readonly logger;
    readonly federation: IdentityFederationBuilder;
    constructor(builder: ProviderConfigBuilder);
    private _prefix;
    readonly prefix: string;
    _dangerouslySetPrefix(prefix: string): void;
    readonly idp: import("../../idp").IdentityProvider;
    readonly op: import("oidc-provider").Provider;
    readonly getURL: (path: string) => string;
    private readonly parseContext;
    private readonly errorHandler;
    private readonly commonMiddleware;
    private readonly middleware;
    use(...middleware: compose.Middleware<InteractionRequestContext>[]): this;
    setPageRenderer<F extends InteractionPageRendererFactory>(factory: F, options?: F extends InteractionPageRendererFactory<infer O> ? O : never): this;
    private _pageRenderer?;
    readonly pageRenderer: InteractionPageRenderer;
    private renderError;
    private readonly renderErrorProxy;
    private renderLogout;
    private readonly logoutSourceProxy;
    private renderLogoutEnd;
    private readonly postLogoutSuccessSourceProxy;
    private renderDeviceFlow;
    private readonly deviceFlowUserCodeInputSourceProxy;
    private renderDeviceFlowConfirm;
    private readonly deviceFlowUserCodeConfirmSourceProxy;
    private renderDeviceFlowEnd;
    private readonly deviceFlowSuccessSourceProxy;
    private readonly _config;
    setPrompts(prompts: interactionPolicy.Prompt[]): this;
    _dangerouslyGetDynamicConfiguration(): Partial<DynamicConfiguration>;
    _dangerouslyBuild(): void;
    getPublicClientProps(client?: Client): Promise<Partial<ClientMetadata> | undefined>;
    getPublicUserProps(id?: Identity): Promise<Partial<OIDCAccountClaims> | undefined>;
}
